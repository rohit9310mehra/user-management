/*
 * This file is generated by jOOQ.
 */
package com.mycompany.myapp.database;

import com.mycompany.myapp.database.tables.Databasechangeloglock;
import com.mycompany.myapp.database.tables.JhiAuthority;
import com.mycompany.myapp.database.tables.JhiUser;
import com.mycompany.myapp.database.tables.JhiUserAuthority;
import com.mycompany.myapp.database.tables.records.DatabasechangeloglockRecord;
import com.mycompany.myapp.database.tables.records.JhiAuthorityRecord;
import com.mycompany.myapp.database.tables.records.JhiUserAuthorityRecord;
import com.mycompany.myapp.database.tables.records.JhiUserRecord;
import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;

/**
 * A class modelling foreign key relationships and constraints of tables in the
 * default schema.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<DatabasechangeloglockRecord> KEY_DATABASECHANGELOGLOCK_PRIMARY = Internal.createUniqueKey(
        Databasechangeloglock.DATABASECHANGELOGLOCK,
        DSL.name("KEY_databasechangeloglock_PRIMARY"),
        new TableField[] { Databasechangeloglock.DATABASECHANGELOGLOCK.ID },
        true
    );
    public static final UniqueKey<JhiAuthorityRecord> KEY_JHI_AUTHORITY_PRIMARY = Internal.createUniqueKey(
        JhiAuthority.JHI_AUTHORITY,
        DSL.name("KEY_jhi_authority_PRIMARY"),
        new TableField[] { JhiAuthority.JHI_AUTHORITY.NAME },
        true
    );
    public static final UniqueKey<JhiUserRecord> KEY_JHI_USER_PRIMARY = Internal.createUniqueKey(
        JhiUser.JHI_USER,
        DSL.name("KEY_jhi_user_PRIMARY"),
        new TableField[] { JhiUser.JHI_USER.ID },
        true
    );
    public static final UniqueKey<JhiUserRecord> KEY_JHI_USER_UX_USER_EMAIL = Internal.createUniqueKey(
        JhiUser.JHI_USER,
        DSL.name("KEY_jhi_user_ux_user_email"),
        new TableField[] { JhiUser.JHI_USER.EMAIL },
        true
    );
    public static final UniqueKey<JhiUserRecord> KEY_JHI_USER_UX_USER_LOGIN = Internal.createUniqueKey(
        JhiUser.JHI_USER,
        DSL.name("KEY_jhi_user_ux_user_login"),
        new TableField[] { JhiUser.JHI_USER.LOGIN },
        true
    );
    public static final UniqueKey<JhiUserAuthorityRecord> KEY_JHI_USER_AUTHORITY_PRIMARY = Internal.createUniqueKey(
        JhiUserAuthority.JHI_USER_AUTHORITY,
        DSL.name("KEY_jhi_user_authority_PRIMARY"),
        new TableField[] { JhiUserAuthority.JHI_USER_AUTHORITY.USER_ID, JhiUserAuthority.JHI_USER_AUTHORITY.AUTHORITY_NAME },
        true
    );

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<JhiUserAuthorityRecord, JhiAuthorityRecord> FK_AUTHORITY_NAME = Internal.createForeignKey(
        JhiUserAuthority.JHI_USER_AUTHORITY,
        DSL.name("fk_authority_name"),
        new TableField[] { JhiUserAuthority.JHI_USER_AUTHORITY.AUTHORITY_NAME },
        Keys.KEY_JHI_AUTHORITY_PRIMARY,
        new TableField[] { JhiAuthority.JHI_AUTHORITY.NAME },
        true
    );
    public static final ForeignKey<JhiUserAuthorityRecord, JhiUserRecord> FK_USER_ID = Internal.createForeignKey(
        JhiUserAuthority.JHI_USER_AUTHORITY,
        DSL.name("fk_user_id"),
        new TableField[] { JhiUserAuthority.JHI_USER_AUTHORITY.USER_ID },
        Keys.KEY_JHI_USER_PRIMARY,
        new TableField[] { JhiUser.JHI_USER.ID },
        true
    );
}
