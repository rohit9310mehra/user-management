/*
 * This file is generated by jOOQ.
 */
package com.mycompany.myapp.database.tables;

import com.mycompany.myapp.database.DefaultSchema;
import com.mycompany.myapp.database.Keys;
import com.mycompany.myapp.database.tables.JhiAuthority.JhiAuthorityPath;
import com.mycompany.myapp.database.tables.JhiUser.JhiUserPath;
import com.mycompany.myapp.database.tables.records.JhiUserAuthorityRecord;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JhiUserAuthority extends TableImpl<JhiUserAuthorityRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>jhi_user_authority</code>
     */
    public static final JhiUserAuthority JHI_USER_AUTHORITY = new JhiUserAuthority();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JhiUserAuthorityRecord> getRecordType() {
        return JhiUserAuthorityRecord.class;
    }

    /**
     * The column <code>jhi_user_authority.user_id</code>.
     */
    public final TableField<JhiUserAuthorityRecord, Long> USER_ID = createField(
        DSL.name("user_id"),
        SQLDataType.BIGINT.nullable(false),
        this,
        ""
    );

    /**
     * The column <code>jhi_user_authority.authority_name</code>.
     */
    public final TableField<JhiUserAuthorityRecord, String> AUTHORITY_NAME = createField(
        DSL.name("authority_name"),
        SQLDataType.VARCHAR(50).nullable(false),
        this,
        ""
    );

    private JhiUserAuthority(Name alias, Table<JhiUserAuthorityRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JhiUserAuthority(Name alias, Table<JhiUserAuthorityRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>jhi_user_authority</code> table reference
     */
    public JhiUserAuthority(String alias) {
        this(DSL.name(alias), JHI_USER_AUTHORITY);
    }

    /**
     * Create an aliased <code>jhi_user_authority</code> table reference
     */
    public JhiUserAuthority(Name alias) {
        this(alias, JHI_USER_AUTHORITY);
    }

    /**
     * Create a <code>jhi_user_authority</code> table reference
     */
    public JhiUserAuthority() {
        this(DSL.name("jhi_user_authority"), null);
    }

    public <O extends Record> JhiUserAuthority(
        Table<O> path,
        ForeignKey<O, JhiUserAuthorityRecord> childPath,
        InverseForeignKey<O, JhiUserAuthorityRecord> parentPath
    ) {
        super(path, childPath, parentPath, JHI_USER_AUTHORITY);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class JhiUserAuthorityPath extends JhiUserAuthority implements Path<JhiUserAuthorityRecord> {

        private static final long serialVersionUID = 1L;

        public <O extends Record> JhiUserAuthorityPath(
            Table<O> path,
            ForeignKey<O, JhiUserAuthorityRecord> childPath,
            InverseForeignKey<O, JhiUserAuthorityRecord> parentPath
        ) {
            super(path, childPath, parentPath);
        }

        private JhiUserAuthorityPath(Name alias, Table<JhiUserAuthorityRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public JhiUserAuthorityPath as(String alias) {
            return new JhiUserAuthorityPath(DSL.name(alias), this);
        }

        @Override
        public JhiUserAuthorityPath as(Name alias) {
            return new JhiUserAuthorityPath(alias, this);
        }

        @Override
        public JhiUserAuthorityPath as(Table<?> alias) {
            return new JhiUserAuthorityPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<JhiUserAuthorityRecord> getPrimaryKey() {
        return Keys.KEY_JHI_USER_AUTHORITY_PRIMARY;
    }

    @Override
    public List<ForeignKey<JhiUserAuthorityRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_AUTHORITY_NAME, Keys.FK_USER_ID);
    }

    private transient JhiAuthorityPath _jhiAuthority;

    /**
     * Get the implicit join path to the <code>jhi_authority</code> table.
     */
    public JhiAuthorityPath jhiAuthority() {
        if (_jhiAuthority == null) _jhiAuthority = new JhiAuthorityPath(this, Keys.FK_AUTHORITY_NAME, null);

        return _jhiAuthority;
    }

    private transient JhiUserPath _jhiUser;

    /**
     * Get the implicit join path to the <code>jhi_user</code> table.
     */
    public JhiUserPath jhiUser() {
        if (_jhiUser == null) _jhiUser = new JhiUserPath(this, Keys.FK_USER_ID, null);

        return _jhiUser;
    }

    @Override
    public JhiUserAuthority as(String alias) {
        return new JhiUserAuthority(DSL.name(alias), this);
    }

    @Override
    public JhiUserAuthority as(Name alias) {
        return new JhiUserAuthority(alias, this);
    }

    @Override
    public JhiUserAuthority as(Table<?> alias) {
        return new JhiUserAuthority(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JhiUserAuthority rename(String name) {
        return new JhiUserAuthority(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JhiUserAuthority rename(Name name) {
        return new JhiUserAuthority(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JhiUserAuthority rename(Table<?> name) {
        return new JhiUserAuthority(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JhiUserAuthority where(Condition condition) {
        return new JhiUserAuthority(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JhiUserAuthority where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JhiUserAuthority where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JhiUserAuthority where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JhiUserAuthority where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JhiUserAuthority where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JhiUserAuthority where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JhiUserAuthority where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JhiUserAuthority whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JhiUserAuthority whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
