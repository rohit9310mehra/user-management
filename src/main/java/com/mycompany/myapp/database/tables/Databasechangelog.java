/*
 * This file is generated by jOOQ.
 */
package com.mycompany.myapp.database.tables;

import com.mycompany.myapp.database.DefaultSchema;
import com.mycompany.myapp.database.tables.records.DatabasechangelogRecord;
import java.time.LocalDateTime;
import java.util.Collection;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Databasechangelog extends TableImpl<DatabasechangelogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>databasechangelog</code>
     */
    public static final Databasechangelog DATABASECHANGELOG = new Databasechangelog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DatabasechangelogRecord> getRecordType() {
        return DatabasechangelogRecord.class;
    }

    /**
     * The column <code>databasechangelog.ID</code>.
     */
    public final TableField<DatabasechangelogRecord, String> ID = createField(
        DSL.name("ID"),
        SQLDataType.VARCHAR(255).nullable(false),
        this,
        ""
    );

    /**
     * The column <code>databasechangelog.AUTHOR</code>.
     */
    public final TableField<DatabasechangelogRecord, String> AUTHOR = createField(
        DSL.name("AUTHOR"),
        SQLDataType.VARCHAR(255).nullable(false),
        this,
        ""
    );

    /**
     * The column <code>databasechangelog.FILENAME</code>.
     */
    public final TableField<DatabasechangelogRecord, String> FILENAME = createField(
        DSL.name("FILENAME"),
        SQLDataType.VARCHAR(255).nullable(false),
        this,
        ""
    );

    /**
     * The column <code>databasechangelog.DATEEXECUTED</code>.
     */
    public final TableField<DatabasechangelogRecord, LocalDateTime> DATEEXECUTED = createField(
        DSL.name("DATEEXECUTED"),
        SQLDataType.LOCALDATETIME(0).nullable(false),
        this,
        ""
    );

    /**
     * The column <code>databasechangelog.ORDEREXECUTED</code>.
     */
    public final TableField<DatabasechangelogRecord, Integer> ORDEREXECUTED = createField(
        DSL.name("ORDEREXECUTED"),
        SQLDataType.INTEGER.nullable(false),
        this,
        ""
    );

    /**
     * The column <code>databasechangelog.EXECTYPE</code>.
     */
    public final TableField<DatabasechangelogRecord, String> EXECTYPE = createField(
        DSL.name("EXECTYPE"),
        SQLDataType.VARCHAR(10).nullable(false),
        this,
        ""
    );

    /**
     * The column <code>databasechangelog.MD5SUM</code>.
     */
    public final TableField<DatabasechangelogRecord, String> MD5SUM = createField(DSL.name("MD5SUM"), SQLDataType.VARCHAR(35), this, "");

    /**
     * The column <code>databasechangelog.DESCRIPTION</code>.
     */
    public final TableField<DatabasechangelogRecord, String> DESCRIPTION = createField(
        DSL.name("DESCRIPTION"),
        SQLDataType.VARCHAR(255),
        this,
        ""
    );

    /**
     * The column <code>databasechangelog.COMMENTS</code>.
     */
    public final TableField<DatabasechangelogRecord, String> COMMENTS = createField(
        DSL.name("COMMENTS"),
        SQLDataType.VARCHAR(255),
        this,
        ""
    );

    /**
     * The column <code>databasechangelog.TAG</code>.
     */
    public final TableField<DatabasechangelogRecord, String> TAG = createField(DSL.name("TAG"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>databasechangelog.LIQUIBASE</code>.
     */
    public final TableField<DatabasechangelogRecord, String> LIQUIBASE = createField(
        DSL.name("LIQUIBASE"),
        SQLDataType.VARCHAR(20),
        this,
        ""
    );

    /**
     * The column <code>databasechangelog.CONTEXTS</code>.
     */
    public final TableField<DatabasechangelogRecord, String> CONTEXTS = createField(
        DSL.name("CONTEXTS"),
        SQLDataType.VARCHAR(255),
        this,
        ""
    );

    /**
     * The column <code>databasechangelog.LABELS</code>.
     */
    public final TableField<DatabasechangelogRecord, String> LABELS = createField(DSL.name("LABELS"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>databasechangelog.DEPLOYMENT_ID</code>.
     */
    public final TableField<DatabasechangelogRecord, String> DEPLOYMENT_ID = createField(
        DSL.name("DEPLOYMENT_ID"),
        SQLDataType.VARCHAR(10),
        this,
        ""
    );

    private Databasechangelog(Name alias, Table<DatabasechangelogRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Databasechangelog(Name alias, Table<DatabasechangelogRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>databasechangelog</code> table reference
     */
    public Databasechangelog(String alias) {
        this(DSL.name(alias), DATABASECHANGELOG);
    }

    /**
     * Create an aliased <code>databasechangelog</code> table reference
     */
    public Databasechangelog(Name alias) {
        this(alias, DATABASECHANGELOG);
    }

    /**
     * Create a <code>databasechangelog</code> table reference
     */
    public Databasechangelog() {
        this(DSL.name("databasechangelog"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Databasechangelog as(String alias) {
        return new Databasechangelog(DSL.name(alias), this);
    }

    @Override
    public Databasechangelog as(Name alias) {
        return new Databasechangelog(alias, this);
    }

    @Override
    public Databasechangelog as(Table<?> alias) {
        return new Databasechangelog(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Databasechangelog rename(String name) {
        return new Databasechangelog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Databasechangelog rename(Name name) {
        return new Databasechangelog(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Databasechangelog rename(Table<?> name) {
        return new Databasechangelog(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Databasechangelog where(Condition condition) {
        return new Databasechangelog(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Databasechangelog where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Databasechangelog where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Databasechangelog where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Databasechangelog where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Databasechangelog where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Databasechangelog where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Databasechangelog where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Databasechangelog whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Databasechangelog whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
