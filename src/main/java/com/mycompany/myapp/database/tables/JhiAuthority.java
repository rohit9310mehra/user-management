/*
 * This file is generated by jOOQ.
 */
package com.mycompany.myapp.database.tables;

import com.mycompany.myapp.database.DefaultSchema;
import com.mycompany.myapp.database.Keys;
import com.mycompany.myapp.database.tables.JhiUser.JhiUserPath;
import com.mycompany.myapp.database.tables.JhiUserAuthority.JhiUserAuthorityPath;
import com.mycompany.myapp.database.tables.records.JhiAuthorityRecord;
import java.util.Collection;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JhiAuthority extends TableImpl<JhiAuthorityRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>jhi_authority</code>
     */
    public static final JhiAuthority JHI_AUTHORITY = new JhiAuthority();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JhiAuthorityRecord> getRecordType() {
        return JhiAuthorityRecord.class;
    }

    /**
     * The column <code>jhi_authority.name</code>.
     */
    public final TableField<JhiAuthorityRecord, String> NAME = createField(
        DSL.name("name"),
        SQLDataType.VARCHAR(50).nullable(false),
        this,
        ""
    );

    private JhiAuthority(Name alias, Table<JhiAuthorityRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JhiAuthority(Name alias, Table<JhiAuthorityRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>jhi_authority</code> table reference
     */
    public JhiAuthority(String alias) {
        this(DSL.name(alias), JHI_AUTHORITY);
    }

    /**
     * Create an aliased <code>jhi_authority</code> table reference
     */
    public JhiAuthority(Name alias) {
        this(alias, JHI_AUTHORITY);
    }

    /**
     * Create a <code>jhi_authority</code> table reference
     */
    public JhiAuthority() {
        this(DSL.name("jhi_authority"), null);
    }

    public <O extends Record> JhiAuthority(
        Table<O> path,
        ForeignKey<O, JhiAuthorityRecord> childPath,
        InverseForeignKey<O, JhiAuthorityRecord> parentPath
    ) {
        super(path, childPath, parentPath, JHI_AUTHORITY);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class JhiAuthorityPath extends JhiAuthority implements Path<JhiAuthorityRecord> {

        private static final long serialVersionUID = 1L;

        public <O extends Record> JhiAuthorityPath(
            Table<O> path,
            ForeignKey<O, JhiAuthorityRecord> childPath,
            InverseForeignKey<O, JhiAuthorityRecord> parentPath
        ) {
            super(path, childPath, parentPath);
        }

        private JhiAuthorityPath(Name alias, Table<JhiAuthorityRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public JhiAuthorityPath as(String alias) {
            return new JhiAuthorityPath(DSL.name(alias), this);
        }

        @Override
        public JhiAuthorityPath as(Name alias) {
            return new JhiAuthorityPath(alias, this);
        }

        @Override
        public JhiAuthorityPath as(Table<?> alias) {
            return new JhiAuthorityPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<JhiAuthorityRecord> getPrimaryKey() {
        return Keys.KEY_JHI_AUTHORITY_PRIMARY;
    }

    private transient JhiUserAuthorityPath _jhiUserAuthority;

    /**
     * Get the implicit to-many join path to the <code>jhi_user_authority</code>
     * table
     */
    public JhiUserAuthorityPath jhiUserAuthority() {
        if (_jhiUserAuthority == null) _jhiUserAuthority = new JhiUserAuthorityPath(this, null, Keys.FK_AUTHORITY_NAME.getInverseKey());

        return _jhiUserAuthority;
    }

    /**
     * Get the implicit many-to-many join path to the <code>jhi_user</code>
     * table
     */
    public JhiUserPath jhiUser() {
        return jhiUserAuthority().jhiUser();
    }

    @Override
    public JhiAuthority as(String alias) {
        return new JhiAuthority(DSL.name(alias), this);
    }

    @Override
    public JhiAuthority as(Name alias) {
        return new JhiAuthority(alias, this);
    }

    @Override
    public JhiAuthority as(Table<?> alias) {
        return new JhiAuthority(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JhiAuthority rename(String name) {
        return new JhiAuthority(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JhiAuthority rename(Name name) {
        return new JhiAuthority(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JhiAuthority rename(Table<?> name) {
        return new JhiAuthority(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JhiAuthority where(Condition condition) {
        return new JhiAuthority(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JhiAuthority where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JhiAuthority where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JhiAuthority where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JhiAuthority where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JhiAuthority where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JhiAuthority where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JhiAuthority where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JhiAuthority whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JhiAuthority whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
